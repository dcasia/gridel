@mixin padding($gutter) {

    .#{$prefix}-padding--horizontal {
        padding-left: calc(#{$gutter} / 2);
        padding-right: calc(#{$gutter} / 2);
    }

    &.\--padding-horizontal {
        > * {
            padding-left: calc(#{$gutter} / 2);
            padding-right: calc(#{$gutter} / 2);
        }
    }

}

@mixin grid($columns, $rows, $height, $gutter) {
    grid-template-columns: repeat($columns, 1fr);
    grid-template-rows: repeat($rows, $height * 1rem);
    @include padding($gutter)
}

@mixin baseline-image($object-height) {

    $line-height: double($font-size, $row-height);

    $offset: ($line-height - $cap-height * $font-size) / 2;

    margin-top: ($offset - $row-height) + rem;
    margin-bottom: -($offset - $row-height) + rem;

}

@function _length($number, $unit) {
    $strings: 'px' '%' 'em' 'rem' 'vw' 'vh';
    $units: 1px 1% 1em 1rem 1vw 1vh;
    $index: index($strings, $unit);

    @if not $index {
        @warn "Unknown unit `#{$unit}`.";
        @return false;
    }

    @return $number * nth($units, $index);
}

@function number($value) {

    @if type-of($value) == 'number' {
        @return $value;
    }

    $result: 0;
    $digits: 0;
    $minus: str-slice($value, 1, 1) == '-';
    $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

    @for $i from if($minus, 2, 1) through str-length($value) {
        $character: str-slice($value, $i, $i);

        @if not (index(map-keys($numbers), $character) or $character == '.') {
            @return _length(if($minus, -$result, $result), str-slice($value, $i))
        }

        @if $character == '.' {
            $digits: 1;
        } @else if $digits == 0 {
            $result: $result * 10 + map-get($numbers, $character);
        } @else {
            $digits: $digits * 10;
            $result: $result + map-get($numbers, $character) / $digits;
        }
    }

    @return if($minus, -$result, $result);

}

@function clear-units($number) {
    @return $number / ($number * 0 + 1);
}

@mixin baseline($font-size, $cap-height: $cap-height, $skip: 0, $for: $first-breakpoint-name) {

    $font-size: clear-units($font-size);

    @each $current in $breakpoints {

        $break: map_get($current, breakpoint);
        $row-height: map_get($current, row-height);

        $line-height: double($font-size, $row-height);
        $offset: ($line-height - $cap-height * $font-size) / 2;

        $is-nested: false;

        @if variable_exists(gridel-grid-parent-selector) {

            @if is-nested-selector(map-get($gridel-grid-parent-selector, element), first(&)) {
                $offset: $offset + map-get($gridel-grid-parent-selector, offset);
            }

            $is-nested: true;

        }

        @if first($breakpoints) == $current {
            @include font-spacing($font-size, $line-height, $row-height, $offset, $skip, $is-nested);
        } @else {
            @include breakpoint(#{$break}rem) {
                @include font-spacing($font-size, $line-height, $row-height, $offset, $skip, $is-nested);
            }
        }

        $gridel-grid-parent-selector: (
                element: first(&),
                offset: ($offset - $row-height) * -1,
                skipOffset: $offset
        ) !global;

    }

    @content;

}

@mixin font-spacing($font-size, $line-height, $row-height, $offset, $skip, $is-nested: false) {

    font-size: #{$font-size}rem;
    line-height: #{$line-height}rem;
    display: block;

    @if $font-size > $row-height or $is-nested == true {
        margin-top: ($offset - $row-height) + rem;
        margin-bottom: -($offset - $row-height) + rem;
        padding-top: $row-height * $skip + rem;
    } @else {
        padding-top: $offset + rem;
        margin-bottom: -$offset + rem;
        margin-top: $row-height * $skip + rem;
    }

}

@mixin grid-rows($count) {

    @each $current in $breakpoints {

        $break: map_get($current, 'breakpoint');
        $height: map_get($current, 'row-height');

        @if first($breakpoints) == $current {
            grid-template-rows: repeat($count, $height + rem);
        } @else {
            @include breakpoint(#{$break}rem) {
                grid-template-rows: repeat($count, $height + rem);
            }
        }

    }

}
